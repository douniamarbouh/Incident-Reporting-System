pragma solidity ^0.4.0;

contract ReportIncident{

   address pharmacy = 0x001d3f1ef827552ae1114027bd3ecf1f086ba0f9;
   address healthministry=0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2dc;
   address FDA = 0xca35b7d915458ef540ade6068dfe2f44e8fa733c;
   
// variables needed from patients to report an incident
       uint PatientID;
       uint Age; 
       string CareVisitReason;
       string ExperienceDescription; 
       string CareSetting;
       string MedicalHistory; 
       string ContactInformation; 
       
       
// variables needed from doctors to report an incident
       uint DoctorID;
       string IncidentDescription;
       uint256 IncidentDate;
       uint IncidentCategory;
       string staffgroup;
       string emailaddress;
       uint HarmDegree;

    modifier onlyhealthministry() {
        require(msg.sender == healthministry);
        _;
    }
    
    function IRS_SC() public {
        healthministry = msg.sender;
    }
    
  
   //       National Health Organization Structure Smart Contract            //

    mapping (address => bool) Hospital;

     function Authorize_Hospital(address _HospitalAddress) onlyhealthministry public {
        Hospital[_HospitalAddress] = true;
    }

    function Get_Authorize_Hospital(address _HospitalAddress) view public returns (bool) {
        return (Hospital[_HospitalAddress]);
    }
    
    //**********************Reporting Process********************************//
    
    modifier onlyHospital() {
        require(Hospital[msg.sender] == true);
        _;
    }
    
    struct Doctor{
        bool Valid;
        uint index;
        mapping (uint=>address) Patient;
    }
    
    mapping (address => Doctor) doctors;
    
    function Add_Doctor(address _DoctorAddress) onlyHospital public {
        doctors[_DoctorAddress].Valid = true;
    }
    
    struct Patient{
        bool Valid;
        uint index;
        mapping (uint=>string) IPFS_Data_Record;
        address Doctor;
        mapping (address=>bool) Doctor_Valid;
        string IPFS_IncidentDetails;
    }
    mapping (address => Patient) patients;
    
    function Add_Patient(address _PatientAddress) onlyHospital public {
        patients[_PatientAddress].Valid = true;
    }
    
 //********************Incident is added by the patient*************************************//

    function Check_Patient(address _PatientAddress) view public returns (bool) { 
        return (patients[_PatientAddress].Valid);
    }
    event IncidentAddedbyPatient(string);
    function addIncidentPatient  (uint PatientID, uint Age, string CareVisitReason, 
                                  string ExperienceDescription, string CareSetting,
                                  string MedicalHistory, string ContactInformation) onlyPatient{
        emit IncidentAddedbyPatient("Incident Added by Patient"); 
    }

 //*******************Incident is added by the doctor*************************************//
 
    event IncidentAddedbyDoctor(string);
    function addIncidentDoctor (uint DoctorID, string IncidentDescription, 
                                uint256 IncidentDate, uint IncidentCategory, 
                                string staffgroup, string emailaddress, uint HarmDegree) onlyDoctor{
        emit IncidentAddedbyDoctor("Incident Added by healthcare practitioner"); 
    }

   //*****************Upload Incident details to IPFS*************************************//
    
    event NewIncidentReported(address _address,string _IPFS);

    function IncidenTAddedtoIPFS(address _PatientAddress, string _IPFS) onlyDoctor public{
        patients[_PatientAddress].IPFS_IncidentDetails = _IPFS;
        NewIncidentReported(_PatientAddress,_IPFS);
        
    }
 
   //*****************Get Incident details from IPFS*************************************// 
    
    function Get_IncidentDetails(address _PatientAddress) view public returns (string) {
        return (patients[_PatientAddress].IPFS_IncidentDetails);
        
    }
 
    //*****************Send Update to Pharmacies****************************************// 
    
    event ReviewMedication();
    event WithdrawMedication ();
    event CheckMinistryPlan();
       function MedicationReview() onlypharmacy{ 
           if (IncidentCategory == 10){ // 10 is the code number of medication errors
               emit ReviewMedication();
               if (HarmDegree==1)  // 1 for serious incidents (SI)
               emit WithdrawMedication ();
            else 
               emit CheckMinistryPlan();
       }
   }
    
    //*****************Send Update to FDA****************************************// 
    event ReviewIncident ();
    event ContactManufacturers(); 
    event FDAActioPlan();
          function FDAReview() onlyFDA {
            if (HarmDegree==1) {
              emit ContactManufacturers();
              emit FDAActioPlan();
            }
            else {
              emit ReviewIncident();
            }
            
    }
    
   //**************Send Update to Ministry of Health *************************// 
    event ReviewIncidentMinistry();
    event MinistryActionPlan();
          function MinistryReview() onlyhealthministry {
            if (HarmDegree==1) {
              emit MinistryActionPlan ();
            }
            else { 
                emit ReviewIncidentMinistry();
    }
          }
          
    //**********************************************************************************//   
    
    mapping (address => uint) balances;
    
    event ReporterRewarded(address from, address to, uint amount);

    // Receiver can be the address of either the healthcare practitioner or patient //
    
    function RewardReporter(address receiver, uint amount) onlyhealthministry { 
        balances[receiver] += amount;
        emit ReporterRewarded(msg.sender, receiver, amount);
    }
    
    //**********************************************************************************//   
    modifier onlyPatient() {
        require(patients[msg.sender].Valid == true);
        _;
    }
    modifier onlyDoctor() {
        require(doctors[msg.sender].Valid == true);
        _;
    }
    modifier onlyFDA() {
        if (msg.sender == FDA)
        _;
    }

    modifier onlypharmacy() {                    
        if (msg.sender == pharmacy)
        _;
    }
}
